pub fn get_closest_checkpoint(chain_name: &str, height: u64) ->  Option<(u64, &'static str, &'static str)> {
    match chain_name {
        "test" => get_test_checkpoint(height),
        "main" => get_main_checkpoint(height),
        _      => None
    }
}

fn get_test_checkpoint(height: u64) ->  Option<(u64, &'static str, &'static str)> {
    let checkpoints: Vec<(u64, &str, &str)> = vec![
        // (600000, "0107385846c7451480912c294b6ce1ee1feba6c2619079fd9104f6e71e4d8fe7",
        //          "01690698411e3f8badea7da885e556d7aba365a797e9b20b44ac0946dced14b23c001001ab2a18a5a86aa5d77e43b69071b21770b6fe6b3c26304dcaf7f96c0bb3fed74d000186482712fa0f2e5aa2f2700c4ed49ef360820f323d34e2b447b78df5ec4dfa0401a332e89a21afb073cb1db7d6f07396b56a95e97454b9bca5a63d0ebc575d3a33000000000001c9d3564eff54ebc328eab2e4f1150c3637f4f47516f879a0cfebdf49fe7b1d5201c104705fac60a85596010e41260d07f3a64f38f37a112eaef41cd9d736edc5270145e3d4899fcd7f0f1236ae31eafb3f4b65ad6b11a17eae1729cec09bd3afa01a000000011f8322ef806eb2430dc4a7a41c1b344bea5be946efc7b4349c1c9edb14ff9d39"
        // ),
        // (650000, "003f7e09a357a75c3742af1b7e1189a9038a360cebb9d55e158af94a1c5aa682",
        //          "010113f257f93a40e25cfc8161022f21c06fa2bc7fb03ee9f9399b3b30c636715301ef5b99706e40a19596d758bf7f4fd1b83c3054557bf7fab4801985642c317d41100001b2ad599fd7062af72bea99438dc5d8c3aa66ab52ed7dee3e066c4e762bd4e42b0001599dd114ec6c4c5774929a342d530bf109b131b48db2d20855afa9d37c92d6390000019159393c84b1bf439d142ed2c54ee8d5f7599a8b8f95e4035a75c30b0ec0fa4c0128e3a018bd08b2a98ed8b6995826f5857a9dc2777ce6af86db1ae68b01c3c53d0000000001e3ec5d790cc9acc2586fc6e9ce5aae5f5aba32d33e386165c248c4a03ec8ed670000011f8322ef806eb2430dc4a7a41c1b344bea5be946efc7b4349c1c9edb14ff9d39"
        // )
    ];

    find_checkpoint(height, checkpoints)
}


fn get_main_checkpoint(height: u64) ->  Option<(u64, &'static str, &'static str)> {
    let checkpoints: Vec<(u64, &str, &str)> = vec![
        // (500000, "000000c642fda400a464c50dcf310e65efa2627799b9b0c378524205ba2307b7","014819ca94dac152e7caad1c4fe0fb339343d30084775a10d792f50e56d85e893e018a6e949342beea95fce4d646a09b5ee792531779d866d1e082ff80f62c6028030b01f6fb9b8cef82c92b949324abfa1c8afb82c73e4b48ee59b5284f396de74f632001ad515dd43a07ad98474e165b44c6281060904bf116d70ecb96acffa3c2551713000188153113124a17b84f77ee3bee893be274f2686a454f66208f3cce49877572160000000001832e857dfe5e64d324e7f3f9b2017860dade173bba1cdd8709dad497d6d8ed4c0001ffbcedcff498ad3d7bef07a93a8d601cb5b6de9b87f62e7629c6583def950d57"),
        // (550000, "000003cb1f3c128819bdf84632fd31058014542af64eea8959d5139fc26c21cd","011e084d9028f86423e20c3957b741c21101463fd1318a46f0217800da52b6982601a2689b9659e3b3b2e92e13ebdb2e5c745625f107153e0e8ee17430819a9181240d000001582f5de14bbe65e3b4365deeb42a074b9e89733150f9e6c702c5e73b16eb9e27015355ec98f61a65805b304b5f4f01b6a6b550b0ff90654c3bb14d37ea66d2d25b016e96a1699966f4be5958d39ccf4a80fd9c8bfc791a26b04e64b92b68e74c5d6f00000001bef355e062338cc8b1c728aba1a09a892d15f0cec6e66b1dce3bf683f46fe3710194f4d0df7683fccc0fe400aab264eef1be8273e952e40f94eeff15dd71778f0b00000161d449385412557da75d1a6fd3adb2755c90d379b474ffda2da7996d5880bc20"),
        // (600000, "000000a0e6efed6a536c2c5063c666102fb2f9ddb4a226b34a0894c723519e48","019c80fa055af06b00b2e62234dc88d0f20eb5bdd029f27db5015ac5421c0d971a01843776c7c19531a4b70fd74a2f5300125d93697fb1df874f01860967043ae90d0e000170203c0ea694d0ec23c2b330e38d8a72be85f7cda2433e228938a08f0d357d5301a2f0efece5d0ef22101f1a88856d8263b813c47843af6fdeed8745ebf479f202012aaa5eb3f4659c96c07961311425f6d2469f8f161abdf1cd6050cc9cc1650d3c016a4d5df54decf298a6b83be00f130cec069ea3ef38c8d97dc8c5867dfe5a862501b801046295a11ecd1497a55348057912ce9cce5114466181feb55036a38ee342014cc662fdebea6b1557428d407f28fafdae278480525959863b4a096981178e0b017443ea389a059650f310567225e4626b97c4f7eb4de7f43acd9c5d69392d086f01d108cf831f1721b23323c94d1112f47da6b6c5162d09e3c4afe8d8618c604565012071da2937f4c0d6bdf355976e110708d23ef8f103704cd84f748dba12d6174000015ea99a4cbe8cd1e9b09149545388d53ac264c0e7206bc3251d62aab090aea72a0001c9ee5f761f861d9babfe591dc31ef10cde7f4c42f7c26fdf07ea409f1155262a"),
        // (650000, "00000437dd0e913b3ee3f9f7d785ca02403fe9621bf65e593889f1c74bd67a14","010642a2aac1ea411fac9498ee7ecf27917c8c366ecb61b55ab3d1c4e5608c472e000f0001d1da78af6ff64e1fd6c432a625e9f4abe513911005a9cf06908e0a935632360001834f3ad29fa60183c223520ccbd0f5f555823017f8d4e7f9ab5d79c7c6b6e731016fad879cc5c43e6a05488449772681987372a17c9188d2309ac0d1ea8066b60700013b7dd01550b9f1ea6ae183cee3f9e4d328df9540670b04e2565a1504a16fe247000167ea7809d5a824aa6b6d3a0f5b645d342cc56ab4a439c0a9f1db698864def14d00000173ffa7e42100bee60ec93ca40b73de89f095ec1e9c864d59f8f71fd414afd24001a058f8f22a15871367aa0a46838696747d3ab6cdce77d07d309343955beede68000001034691170b96f4c7750ce0c1b59bf81193290025e7bf2af91d9f372a9a36d10f"),
        // (700000, "000001bee8c5bc29fb8d6c3642662ecb479ec85df648e851edaaa0e090b2c797","01ceff4af4f1b52be90b6c7f47b5163a525406ed5cc9ee162a4553ac78f6cadf5b013f22df3d99d52c4a02b5fdde2963eae56d2fd5eb1b2e361ba3e226edf0277005100127ba111aaaccce8f68b1b6941792030921aec1feac1e00aedcc2b147068499410001a81f9b610ea96322730db5a4ef0564d20b5f48bd1a4c1c6c9686904ab542e24500018d28843019ca5028fd6b2b6a0aa94a1df668cc8f75d6feb9aac84d750e39691000015e186c88c3b0bf1eefa57f0cb0c293524366c8d96dd7a04f987aa196234e2c4900017c27144ffb06b60cda7d646861fca487d6a956633e2792c9ab34d7e59125d46c0000011d3e9aeec6ff15da7578faf9a23d8ea894e7aa1a25b80108faecb7b47a66bc0e0000000166d62135626ff20d77abeef13ec68d89e313de4195995cb0d0516bfd5af17b33"),
        // (750000, "00000154c6a43da617c853c6df9cb1435aedb80e8bbc76d47357c341c264840f","0104e11cbea21d2a11531cb06a16de6a09b85be2a32b68f965940a5418a404677001e3338aca2e46f0757646b59d514ed0d329ede54f0a5017c91b1af4a934c55c3010018d6f7a24db3e70842821fee80ffb0a407b0cf81978ac4c1b567c72545feccc040001dc1e23340b5291e85fceef83b62fcacb8c20043abdb802fd11e09d18725f30670187eaae8febe7b86f61554592e30d15695cd7d300a66b3764f506465a7a17c825012fe6cb8e15ebef0eed22f438771022b80c02af9fb086eb9fbc34ee5d535cd0400000011f8d2789cdf1277c4504f58779685e4cbe0cba2d168d4409126f04f76f7aec610001b9a0a6cf94e6d71bf4a266ea84ef24c4a04361f64c67413aed14591853f2d05300000150a69065c06bad655cdcf191f0f65d8cc1ca8bb1f35426d46c0ccad6b7754c590174c516df639398fc949d34a1b71412454f42a2bc92d6c918df4f7d5582d8ac68000166d62135626ff20d77abeef13ec68d89e313de4195995cb0d0516bfd5af17b33"),
        // (800000, "000001a76b58c2bd8748849ee402d7bb010c862aa20cb82bacdf1008c5a2e2a6","015eb92aa340b783e007fbc59440f58a692983b4df45fcb4bed15f4b0eafeb3438012ec53175dd0c73cb07731c9be676a94a842dd9594b99f23b80a70b56810e1f53100000000001b9162a75faeddb2c05667a0d842586d5cd6a72aae8fa57b5ca70ebcbfb1c532f01ebd3d41b0abe75ef18b40ebc87aa58ed5b9a334fd298c809b9674f2f8948d767017293df4117ab33229928942df3229b1995e9be887e0ba7d023d5e62a49b8d75e0149fdc53dd29217661abcda93b6b66b4eb240778cf5dd361ec5e8314b9c1c4e6c00011202a0c6e857e95ec95473baaf9b2225506c2fdc59d687d6053bf4bc603f347000000101f34ab1470100f029cbc911a899c038c4e1d3c512ab1237bf2e5acb008f696a00012970748afdd3fe833b33c062a30566cccefd8584db94db7cbdfc929c3a06691d0166d62135626ff20d77abeef13ec68d89e313de4195995cb0d0516bfd5af17b33"),
        // (850000, "000001eb727c5b8598c20ed93daf60b3e77ed6a91a2b7a18891468dcdbfe7796","01d7e34604e3bfe16b9d9db00a035b9b9c5908cb2d8617a9cd0b2f0aa985c3784b001000000000000161632e3bbc414fc9da858ec9e31f7045d5f14c733e8e0d6f65c372427dcc4d340001910363995296c76f488586c34fb07f81f13d0131c0e84b40e6d8b6c0647d5505016aa7cae4f5a3ff0acec91c22d76a95eb4d23e31ac7c9c0282739097a07f0150a0001c91f78eedc950040276b03b7bfedbcbbc63f56b17d133df9e05184d6adebb52b01ba027141de6eec6be10307b245741660a32b237b3c3bd545cc429425a817792801cfe97171b0120d477eea190aa3a7e3f8aadf3053cc00298bf845e411b5f8b832012908fa845f893de23b144e6f63ad8dfa4db3a57fe3d9630183154d4651d95909012970748afdd3fe833b33c062a30566cccefd8584db94db7cbdfc929c3a06691d0166d62135626ff20d77abeef13ec68d89e313de4195995cb0d0516bfd5af17b33"),
        // (900000, "000007b665259adb7cda27acc031c275419b9bcdd8e2aec276adf13244d2216d","014c32057f5f4a9aa19024bd5da7b90e49ec97592c50b634f36edc2dd1b3c0ab1501554efd44243576b55a50c0dc6015834defa3746296507ab81847a418439ec70511000000019a0fed69087c96dccc24cebfcf604ae006ad71ac6ee2211c1a4f1acd0b06936a0124b2a98dd05896655cce70c149b88da85e367f5ca463c11226bb1f4353d5af3301a674c227b6f9845da40a9e613d8b83a77de4e7bdf50917af41fbb1260e87034601ce1dbe60dcbc2d0ff7414c081b75f7e937327f4cf986d4c054ec66ebbad8a95a000169bd72a5264f2d3a3b0d105f5991524455a46de9f4ebb22f17d776aee55f5a4f015c5a0dd38c70e45e84a3b0af98531d87114f69387d557f36270aa98684ea1a640119bbc12a1f05fb36a5d790665511dc2e79c2830606269629030b3d6ba0e07e02016165ac2b7b2427242a8001b7914066693def577f7ff9d9edafad352079af334f0001406b73dc4c25c134d606f35c9bac4143889427b9b9a3581df5c3d18d3dc27b110000018d94e637ad75835c34c7c278d4659387cb14e10e3bce05d0d3d046b22a259908"),

    ];

    find_checkpoint(height, checkpoints)
}

fn find_checkpoint(height: u64, chkpts: Vec<(u64, &'static str, &'static str)>) -> Option<(u64, &'static str, &'static str)> {
    // Find the closest checkpoint
    let mut heights = chkpts.iter().map(|(h, _, _)| *h as u64).collect::<Vec<_>>();
    heights.sort();

    match get_first_lower_than(height, heights) {
        Some(closest_height) => {
            chkpts.iter().find(|(h, _, _)| *h ==  closest_height).map(|t| *t)
        },
        None    => None
    }
}

fn get_first_lower_than(height: u64, heights: Vec<u64>) -> Option<u64> {
    // If it's before the first checkpoint, return None.
    if heights.len() == 0 || height < heights[0] {
        return None;
    }

    for (i, h) in heights.iter().enumerate() {
        if height < *h {
            return Some(heights[i-1]);
        }
    }

    return Some(*heights.last().unwrap());
}

#[cfg(test)]
pub mod tests {
    use super::*;

    #[test]
    fn test_lower_than() {
        assert_eq!(get_first_lower_than( 9, vec![10, 30, 40]), None);
        assert_eq!(get_first_lower_than(10, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(11, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(29, vec![10, 30, 40]).unwrap(), 10);
        assert_eq!(get_first_lower_than(30, vec![10, 30, 40]).unwrap(), 30);
        assert_eq!(get_first_lower_than(40, vec![10, 30, 40]).unwrap(), 40);
        assert_eq!(get_first_lower_than(41, vec![10, 30, 40]).unwrap(), 40);
        assert_eq!(get_first_lower_than(99, vec![10, 30, 40]).unwrap(), 40);
    }

    #[test]
    fn test_checkpoints() {
        assert_eq!(get_test_checkpoint(500000), None);
        assert_eq!(get_test_checkpoint(600000).unwrap().0, 600000);
        assert_eq!(get_test_checkpoint(625000).unwrap().0, 600000);
        assert_eq!(get_test_checkpoint(650000).unwrap().0, 650000);
        assert_eq!(get_test_checkpoint(655000).unwrap().0, 650000);

        assert_eq!(get_main_checkpoint(500000), None);
        assert_eq!(get_main_checkpoint(610000).unwrap().0, 610000);
        assert_eq!(get_main_checkpoint(625000).unwrap().0, 610000);
    }

}
